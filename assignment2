Task 1: Use map to convert an array of numbers into an array of their cubes.
Write a JavaScript function that takes an array of numbers as input and returns a new array containing the cubes of each number.

function cubeNumbers(numbers) {
    
    return numbers.map(num => num ** 3);
}


let numbers = [1, 2, 3, 4, 5];
let cubes = cubeNumbers(numbers);
console.log(cubes); 


Task 2: Use reduce to find the sum of all elements in an array.
Write a JavaScript function that takes an array of numbers as input and returns the sum of all elements.

function sumArray(numbers) {
   
    return numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
}


let numbers = [1, 2, 3, 4, 5];
let sum = sumArray(numbers);
console.log(sum); // Output: 15


Task 3: Use filter to find all prime numbers in an array.
Write a JavaScript function that takes an array of numbers as input and returns a new array containing only the prime numbers.

function findPrimes(numbers) {
   
    function isPrime(num) {
        if (num <= 1) return false;  // 1 and below are not prime numbers
        if (num <= 3) return true;   // 2 and 3 are prime numbers
        if (num % 2 === 0 || num % 3 === 0) return false;  // multiples of 2 and 3 are not prime
        
        // Check for prime numbers up to sqrt(num)
        for (let i = 5; i * i <= num; i += 6) {
            if (num % i === 0 || num % (i + 2) === 0) {
                return false;
            }
        }
        return true;
    }
    
    // Use filter to create a new array with only prime numbers
    return numbers.filter(num => isPrime(num));
}

// Example usage:
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let primes = findPrimes(numbers);
console.log(primes); // Output: [2, 3, 5, 7]


Task 4: Use map, reduce, and filter to calculate the average of squared odd numbers in an array.
Write a JavaScript function that takes an array of numbers as input and calculates the average of the squares of all odd numbers in the array.

function averageOfSquaredOddNumbers(numbers) {
    // Filter odd numbers, square them, then calculate average
    let oddNumbersSquared = numbers
        .filter(num => num % 2 !== 0)  // Filter out odd numbers
        .map(num => num ** 2);          // Square each odd number
    
    if (oddNumbersSquared.length === 0) {
        return 0; // Return 0 if there are no odd numbers in the array
    }

    // Calculate average using reduce
    let sum = oddNumbersSquared.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
    let average = sum / oddNumbersSquared.length;
    
    return average;
}

// Example usage:
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let result = averageOfSquaredOddNumbers(numbers);
console.log(result); // Output: 25 // Explanation: Squares of odd numbers: [1, 9, 25, 49, 81]. Average = (1 + 9 + 25 + 49 + 81) / 5 = 25

Task 5: Use map, reduce, and filter to find the longest string in an array of strings.
Write a JavaScript function that takes an array of strings as input and returns the longest string from the array.

function longestString(strings) {
    // Use reduce to find the longest string
    return strings.reduce((longest, current) => {
        // Compare lengths of current string and longest string found so far
        return current.length > longest.length ? current : longest;
    }, "");
}

// Example usage:
let strings = ["apple", "banana", "orange", "kiwi", "strawberry"];
let longest = longestString(strings);
console.log(longest); // Output: "strawberry"

Task 6: Use map to capitalize the first letter of each word in a sentence.
Write a JavaScript function that takes a sentence as input and returns the sentence with the first letter of each word capitalized.

function capitalizeFirstLetter(sentence) {
    // Split the sentence into words
    let words = sentence.split(" ");
    
    // Map over the words array and capitalize the first letter of each word
    let capitalizedWords = words.map(word => {
        // Capitalize the first letter and concatenate with the rest of the word
        return word.charAt(0).toUpperCase() + word.slice(1);
    });
    
    // Join the capitalized words back into a sentence
    let capitalizedSentence = capitalizedWords.join(" ");
    
    return capitalizedSentence;
}

// Example usage:
let sentence = "hello world, how are you?";
let capitalized = capitalizeFirstLetter(sentence);
console.log(capitalized); // Output: "Hello World, How Are You?"

Task 7: Use filter to find all students who passed the exam.
Write a JavaScript function that takes an array of student objects (with properties name and score) as input and returns an array containing only the students who passed the exam (scored 60 or above).

function findPassedStudents(students) {
    // Use filter to find students who passed the exam (scored 60 or above)
    return students.filter(student => student.score >= 60);
}

// Example usage:
let students = [
    { name: "Alice", score: 75 },
    { name: "Bob", score: 45 },
    { name: "Charlie", score: 60 },
    { name: "David", score: 30 },
    { name: "Emily", score: 80 }
];
let passedStudents = findPassedStudents(students);
console.log(passedStudents);


Task 8: Create a Private Counter for Multiple Instances
Write a closure-based function that creates multiple instances of a private counter. Each instance should have its own count, independent of the others. For example:

const counter1 = createInstanceCounter();
const counter2 = createInstanceCounter();

console.log(counter1()); // Output: 1
console.log(counter1()); // Output: 2
console.log(counter2()); // Output: 1
console.log(counter2()); // Output: 2


function createInstanceCounter() {
    let count = 0;  // Private variable to hold the count for each instance
    
    // Return a function that, when called, increments and returns the count
    return function() {
        count++;
        return count;
    };
}

// Example usage:
const counter1 = createInstanceCounter();
const counter2 = createInstanceCounter();

console.log(counter1()); // Output: 1
console.log(counter1()); // Output: 2
console.log(counter2()); // Output: 1
console.log(counter2()); // Output: 2


Task 9: Create a Promise-Based Calculator
Write a Promise-based calculator that takes two numbers and an operation (addition, subtraction, multiplication, or division) as input. Perform the corresponding operation and resolve the Promise with the result. Handle division by zero and any invalid operations by rejecting the Promise with an appropriate error message.

function calculator(num1, num2, operation) {
    return new Promise((resolve, reject) => {
        // Validate operation
        if (typeof num1 !== 'number' || typeof num2 !== 'number') {
            reject("Please provide valid numbers for calculation.");
        } else if (operation !== 'add' && operation !== 'subtract' && operation !== 'multiply' && operation !== 'divide') {
            reject("Invalid operation. Supported operations are 'add', 'subtract', 'multiply', 'divide'.");
        } else {
            // Perform operation
            switch (operation) {
                case 'add':
                    resolve(num1 + num2);
                    break;
                case 'subtract':
                    resolve(num1 - num2);
                    break;
                case 'multiply':
                    resolve(num1 * num2);
                    break;
                case 'divide':
                    if (num2 === 0) {
                        reject("Division by zero is not allowed.");
                    } else {
                        resolve(num1 / num2);
                    }
                    break;
                default:
                    reject("Something went wrong. Please try again later.");
                    break;
            }
        }
    });
}

// Example usage:
calculator(10, 5, 'add')
    .then(result => console.log("Addition Result:", result)) // Output: 15
    .catch(error => console.log("Error:", error));

calculator(10, 5, 'subtract')
    .then(result => console.log("Subtraction Result:", result)) // Output: 5
    .catch(error => console.log("Error:", error));

calculator(10, 5, 'multiply')
    .then(result => console.log("Multiplication Result:", result)) // Output: 50
    .catch(error => console.log("Error:", error));

calculator(10, 0, 'divide')
    .then(result => console.log("Division Result:", result)) // Output: Error: Division by zero is not allowed.
    .catch(error => console.log("Error:", error));

calculator(10, 5, 'unknown')
    .then(result => console.log("Result:", result))
    .catch(error => console.log("Error:", error)); // Output: Error: Invalid operation. Supported operations are 'add', 'subtract', 'multiply', 'divide'.


Task 10: Calculate Total Score
Write a JavaScript function that takes an array of objects, where each object contains a property 
score, and uses the forEach method to calculate the total score of all the objects in the array. 
Return the total score as the output.

function calculateTotalScore(objects) {
    let totalScore = 0;
    
    // Iterate over each object using forEach
    objects.forEach(obj => {
        // Add the score of each object to the total score
        totalScore += obj.score;
    });
    
    return totalScore;
}

// Example usage:
let scores = [
    { score: 80 },
    { score: 65 },
    { score: 90 },
    { score: 75 }
];

let totalScore = calculateTotalScore(scores);
console.log("Total Score:", totalScore); // Output: Total Score: 310
